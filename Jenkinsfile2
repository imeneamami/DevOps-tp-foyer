pipeline {
    agent any

    environment {
        RECIPIENT = 'fedi.ballegi20@gmail.com'
    }

    stages {
        stage('Pre-commit: Talisman') {
            steps {
                echo 'Downloading and running Talisman to scan for sensitive content...'
                // Download the Talisman binary to the current workspace
                sh '''
                    curl -L -o talisman https://github.com/thoughtworks/talisman/releases/latest/download/talisman_linux_amd64
                    chmod +x talisman
                '''
                // Run Talisman scan locally from the workspace
                sh './talisman --scan'
            }
        }

        stage('Checkout Git') {
            steps {
                git credentialsId: 'cred-github', 
                    branch: 'aziz-ballegi',
                    url: 'https://github.com/imeneamami/DevOps-tp-foyer.git'
            }
        }

        stage('Compiling') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Run Unit Tests and JaCoCo') {
            steps {
                sh 'mvn test jacoco:report'
            }
        }

        stage('SonarQube') {
            steps {
                sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=Azizballegi@1234 -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml'
            }
        }

        stage('Nexus Deploy') {
            steps {
                sh 'mvn deploy -DskipTests'
            }
        }

        stage('Commit: OWASP Dependency-Check') {
            steps {
                sh 'mvn org.owasp:dependency-check-maven:check'
            }
        }

        stage('Acceptance Phase: Ansible') {
            steps {
                echo 'Setting up the acceptance environment using Ansible...'
                sh 'ansible-playbook -i inventory/acceptance setup.yml'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -f Dockerfile -t azizballegi/tp-foyer:1.0.0 .'
            }
        }

        stage('Push Docker Image') {
            steps {
                sh '''
                    docker login -u azizballegi -p Aziz@1234
                    docker push azizballegi/tp-foyer:1.0.0
                '''
            }
        }

        stage('Production Phase: OWASP ZAP') {
            steps {
                echo 'Running OWASP ZAP security scan in production...'
                sh 'zap-cli quick-scan --self-contained http://production-url.com'
            }
        }

        stage('Operation Phase: Start Grafana Monitoring') {
            steps {
                echo 'Starting Grafana monitoring...'
                sh 'docker start grafana'
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                sh 'docker compose up -d'
            }
        }

        stage('Send Email Notification') {
            steps {
                script {
                    def buildStatus = currentBuild.result ?: 'SUCCESS'
                    def subject = "Build ${buildStatus}: ${env.JOB_NAME} ${env.BUILD_NUMBER}"
                    def body = """
                        The build has ${buildStatus.toLowerCase()}.
                        
                        You can find the OWASP Dependency-Check report attached.
                    """
                    emailext(
                        to: "${RECIPIENT}",
                        subject: subject,
                        body: body,
                        attachLog: true,
                        attachmentsPattern: 'target/dependency-check-report.html'
                    )
                }
            }
        }
    }

    post {
        always {
            // Archive the OWASP Dependency-Check report
            archiveArtifacts allowEmptyArchive: true, artifacts: 'target/dependency-check-report.html'
            
            // Archive the Talisman report for review
            archiveArtifacts allowEmptyArchive: true, artifacts: 'talisman_report/talisman_reports/data/*'
        }
    }
}


