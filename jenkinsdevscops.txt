pipeline {
    agent any

    tools {
        jdk 'JAVA_HOME'  // Assurez-vous que 'JAVA_HOME' est bien défini dans les outils Jenkins
        maven 'M2_HOME'  // Assurez-vous que 'M2_HOME' est bien défini dans les outils Jenkins
    }

    stages {

        // Pre-Commit Stage for Threat Modeling and Secure Practices
        stage('Pre-Commit: Threat Modeling and Secure Practices') {
            steps {
                script {
                    def attackerPersonas = [
                        "Malicious insider with admin access attempting data exfiltration.",
                        "External hacker targeting user authentication mechanisms.",
                        "Script kiddie trying to exploit known vulnerabilities in the system."
                    ]
                    echo "Attacker Personas:"
                    for (persona in attackerPersonas) {
                        echo persona
                    }

                    echo "\nEvil User Stories:"
                    def evilUserStories = [
                        "As an attacker, I want to inject SQL queries to gain unauthorized access to the database.",
                        "As an attacker, I want to exploit weak passwords to access user accounts."
                    ]
                    for (story in evilUserStories) {
                        echo story
                    }
                }
            }
        }

        // Stage to clone the repository
        stage('GIT') {
            steps {
                git branch: 'torkhaniroua',
                    url: 'https://github.com/imeneamami/DevOps-tp-foyer.git'
            }
        }

        // Stage to compile Maven project
        stage('Maven Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }

        // Acceptance Stage: Security Scanning Tools
        stage('Acceptance: Security Scanning Tools') {
            steps {
                script {
                    // Nmap: Test for unexpected open ports
                    echo "Running Nmap to scan for open ports..."
                    sh '''
                        nmap -sT -p 1-65535 -T4 192.168.30.10 -oN nmap_report.txt
                    '''
                    echo "Nmap scan completed. Report saved to nmap_report.txt."

                    // SQL Injection: Test for SQL injection Attacks
                    echo "Running SQL Injection vulnerabilities test using SQLMap..."
                    sh '''
                        sqlmap -u "http://192.168.30.10/vulnerable-endpoint?id=1" --batch --level=1 --risk=1 --tamper=space2comment --output-dir=sqlmap_output
                    '''
                    echo "SQLMap scan completed. Check sqlmap_output for results."
                }
            }
        }

        // Docker Build and Push
        stage('Building Image') {
            steps {
                sh 'docker build -t torkhaniroua/tp-foyer:5.0.0 .'
            }
        }

        stage('Deploy Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerHubCredentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"'
                    sh 'docker push torkhaniroua/tp-foyer:5.0.0'
                }
            }
        }

        // Production Stage: Trivy Scan Stage
        stage('Trivy Scan') {
            steps {
                script {
                    echo 'Scanning Docker image for vulnerabilities using cached Trivy DB...'
                    def scanResult = sh(script: '''
                        export TRIVY_CACHE_DIR="/var/lib/jenkins/trivy_cache"
                        trivy image --severity HIGH,CRITICAL --skip-db-update --scanners vuln --timeout 10m torkhaniroua/tp-foyer:5.0.0 --exit-code 1
                    ''', returnStatus: true)
                    
                    if (scanResult != 0) {
                        echo "Trivy scan found vulnerabilities in the Docker image, but continuing the build."
                    } else {
                        echo "Trivy scan completed successfully with no critical vulnerabilities."
                    }
                }
            }
        }

        // Push Docker Image to Docker Hub
        stage('Push Docker Image to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerHubCredentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                        docker push torkhaniroua/tp-foyer:5.0.0
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'SUCCESS'
                def bannerColor = pipelineStatus == 'SUCCESS' ? 'green' : 'red'
                
                def body = """<html>
                                <body>
                                    <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                                        <h2>${jobName} - Build ${buildNumber}</h2>
                                        <div style="background-color: ${bannerColor}; padding: 10px;">
                                            <h3 style="color: white;">Pipeline Status: ${pipelineStatus}</h3>
                                        </div>
                                        <p>Check the <a href="${env.BUILD_URL}">Console output</a>.</p>
                                    </div>
                                </body>
                            </html>"""
                emailext (
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus}",
                    body: body,
                    to: 'torkhani.roua@esprit.tn',
                    from: 'jenkins@example.com',
                    replyTo: 'jenkins@example.com',
                    mimeType: 'text/html'
                )
            }
            archiveArtifacts allowEmptyArchive: true, artifacts: 'target/dependency-check-report.html'
        }
    }
}
