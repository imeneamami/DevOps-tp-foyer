pipeline {
    agent any
 environment {
        SONARQUBE_CREDENTIALS = credentials('sonarQube_credentials')
    }

    tools {
        jdk 'JAVA_HOME'  // Assurez-vous que 'JAVA_HOME' est bien défini dans les outils Jenkins
        maven 'M2_HOME'  // Assurez-vous que 'M2_HOME' est bien défini dans les outils Jenkins
    }

    stages {

        // Pre-Commit Stage for Threat Modeling and Secure Practices
        stage('Pre-Commit: Threat Modeling and Secure Practices') {
            steps {
                script {
                    def attackerPersonas = [
                        "Malicious insider with admin access attempting data exfiltration.",
                        "External hacker targeting user authentication mechanisms.",
                        "Script kiddie trying to exploit known vulnerabilities in the system."
                    ]
                    echo "Attacker Personas:"
                    for (persona in attackerPersonas) {
                        echo persona
                    }

                    echo "\nEvil User Stories:"
                    def evilUserStories = [
                        "As an attacker, I want to inject SQL queries to gain unauthorized access to the database.",
                        "As an attacker, I want to exploit weak passwords to access user accounts."
                    ]
                    for (story in evilUserStories) {
                        echo story
                    }
                }
            }
        }

        // Stage to clone the repository
        stage('GIT') {
            steps {
                git branch: 'torkhaniroua',
                    url: 'https://github.com/imeneamami/DevOps-tp-foyer.git'
            }
        }

        // Stage to compile Maven project
        stage('Maven Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }
  // Stage for OWASP Dependency Check
        stage('Commit: OWASP SCAN') {
            steps {
                dependencyCheck additionalArguments: '', odcInstallation: 'DP-check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        
        
      
        stage('SONARQUBE') {
            steps {
                sh 'mvn sonar:sonar -Dsonar.login=$SONARQUBE_CREDENTIALS'
            }
        }
        // Acceptance Stage: Security Scanning Tools
        stage('Acceptance: Security Scanning Tools') {
            steps {
                script {
                    // Nmap: Test for unexpected open ports
                    echo "Running Nmap to scan for open ports..."
                    sh '''
                        nmap -sT -p 1-65535 -T4 192.168.33.10 -oN nmap_report.txt
                    '''
                    echo "Nmap scan completed. Report saved to nmap_report.txt."

                    // SQL Injection: Test for SQL injection Attacks
                    echo "Running SQL Injection vulnerabilities test using SQLMap..."
                    sh '''
                        sqlmap -u "http://192.168.33.10/vulnerable-endpoint?id=1" --batch --level=1 --risk=1 --tamper=space2comment --output-dir=sqlmap_output
                    '''
                    echo "SQLMap scan completed. Check sqlmap_output for results."
                }
            }
        }

        // Docker Build and Push
        stage('Building Image') {
            steps {
                sh 'docker build -t torkhaniroua/tp-foyer:5.0.0 .'
            }
        }

      
        stage('Deploy Image') {
            steps {
                sh 'docker login -u torkhaniroua -p 123456789'
                sh 'docker push torkhaniroua/tp-foyer:5.0.0'
            }
        }
// Production Stage: Trivy Scan Stage
stage('Trivy Scan') {
    steps {
        script {
            echo 'Scanning Docker image for vulnerabilities using Trivy DB...'

            // Vérifier si le cache existe
            def cacheExists = sh(script: 'test -d /var/lib/jenkins/trivy_cache && ls -A /var/lib/jenkins/trivy_cache', returnStatus: true)

            if (cacheExists == 0) {
                echo 'Trivy DB already exists, running with --skip-db-update'
                // Si la base de données existe déjà, on fait un scan sans la mettre à jour
                def scanResult = sh(script: '''
                    export TRIVY_CACHE_DIR="/var/lib/jenkins/trivy_cache"
                    trivy image --severity HIGH,CRITICAL --skip-db-update --scanners vuln --timeout 10m torkhaniroua/tp-foyer:5.0.0 --exit-code 1
                ''', returnStatus: true)
                
                if (scanResult != 0) {
                    echo "Trivy scan found vulnerabilities in the Docker image, but continuing the build."
                } else {
                    echo "Trivy scan completed successfully with no critical vulnerabilities."
                }
            } else {
                echo 'First scan, downloading Trivy DB...'
                // Premier scan, télécharger la base de données
                def scanResult = sh(script: '''
                    export TRIVY_CACHE_DIR="/var/lib/jenkins/trivy_cache"
                    trivy image --severity HIGH,CRITICAL --scanners vuln --timeout 10m torkhaniroua/tp-foyer:5.0.0 --exit-code 1
                ''', returnStatus: true)
                
                if (scanResult != 0) {
                    echo "Trivy scan found vulnerabilities in the Docker image, but continuing the build."
                } else {
                    echo "Trivy scan completed successfully with no critical vulnerabilities."
                }
            }
        }
    }
}



    stage('Deploy with Docker Compose') {
            steps {
                script {
                    sh 'docker-compose up -d'
                }
            }
        }
    }
 stage('Run prometheus') {
            steps {
                sh 'docker restart prometheus'
            }
        }
        stage('Run Grafana') {
            steps {
                sh 'docker restart grafana'
            }
        }
   
    post {
        always {
            script {
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'SUCCESS'
                def bannerColor = pipelineStatus == 'SUCCESS' ? 'green' : 'red'
                
                def body = """<html>
                                <body>
                                    <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                                        <h2>${jobName} - Build ${buildNumber}</h2>
                                        <div style="background-color: ${bannerColor}; padding: 10px;">
                                            <h3 style="color: white;">Pipeline Status: ${pipelineStatus}</h3>
                                        </div>
                                        <p>Check the <a href="${env.BUILD_URL}">Console output</a>.</p>
                                    </div>
                                </body>
                            </html>"""
                emailext (
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus}",
                    body: body,
                    to: 'torkhani.roua@esprit.tn',
                    from: 'jenkins@example.com',
                    replyTo: 'jenkins@example.com',
                    mimeType: 'text/html'
                )
            }
            archiveArtifacts allowEmptyArchive: true, artifacts: 'target/dependency-check-report.html'
        }
    }
}
