pipeline {
    agent any

    environment {
        RECIPIENT = 'fedi.ballegi20@gmail.com'
        TARGET_HOST = '192.168.33.10'
    }

    stages {
         stage('Pre-commit: Evil User Stories') {
            steps {
                echo 'Defining Evil User Stories to identify potential security threats...'
                script {
                    def evilUserStories = [
                        "As an attacker, I want to inject SQL queries to gain unauthorized access to the database.",
                        "As an attacker, I want to cross-site script to steal user session data.",
                        "As an attacker, I want to exploit weak passwords to gain access to user accounts."
                    ]

                    for (story in evilUserStories) {
                        echo story
                    }
                }
            }
        }

        stage('Checkout Git') {
            steps {
                git credentialsId: 'cred-github', 
                    branch: 'aziz-ballegi',
                    url: 'https://github.com/imeneamami/DevOps-tp-foyer.git'
            }
        }

        stage('Compiling') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Run Unit Tests and JaCoCo') {
            steps {
                sh 'mvn test jacoco:report'
            }
        }

        stage('SonarQube') {
            steps {
                sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=Azizballegi@1234 -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml'
            }
        }

        stage('Nexus Deploy') {
            steps {
                sh 'mvn deploy -DskipTests'
            }
        }

        stage('Commit: OWASP Dependency-Check') {
            steps {
                sh 'mvn org.owasp:dependency-check-maven:check'
            }
        }

        stage('Acceptance Phase: nmap') {
            steps {
                script {
                   // Nmap: Test for unexpected open ports
                    echo "Running Nmap to scan for open ports..."
                    sh '''
                        nmap -sT -p 1-65535 -T4 $TARGET_HOST -oN nmap_report.txt
                    '''
                    echo "Nmap scan completed. Report saved to nmap_report.txt."
                }
            }
        }

       // Production Stage: Docker Build and Push
      stage('Production: Build Docker Image') {
            steps {
                sh 'docker build -f Dockerfile -t azizballegi/tp-foyer:1.0.0 .'
            }
        }

// Trivy Scan Stage
        stage('Trivy Scan') {
            steps {
                script {
                    echo 'Scanning Docker image for vulnerabilities using cached Trivy DB...'
                    def scanResult = sh(script: '''
                        export TRIVY_CACHE_DIR="/var/lib/jenkins/trivy_cache"
                        trivy image --severity HIGH,CRITICAL --skip-db-update --scanners vuln --timeout 10m azizballegi/tp-foyer:5.0.0 --exit-code 1
                    ''', returnStatus: true)
                    
                    if (scanResult != 0) {
                        echo "Trivy scan found vulnerabilities in the Docker image, but continuing the build."
                    } else {
                        echo "Trivy scan completed successfully with no critical vulnerabilities."
                    }
                }
            }
        }

        stage('Production: Push Docker Image') {
            steps {
                sh '''
                    docker login -u azizballegi -p Aziz@1234
                    docker push azizballegi/tp-foyer:1.0.0
                '''
            }
        }

        stage('OpenVAS Scan') {
    steps {
        script {
            echo "Running OpenVAS scan..."
            sh '''
                openvas-cli --target $TARGET_HOST --scan --output openvas_report.xml
            '''
            echo "OpenVAS scan completed. Report saved to openvas_report.xml."
        }
    }
}


        stage('Send Email Notification') {
            steps {
                script {
                    def buildStatus = currentBuild.result ?: 'SUCCESS'
                    def subject = "Build ${buildStatus}: ${env.JOB_NAME} ${env.BUILD_NUMBER}"
                    def body = """
                        The build has ${buildStatus.toLowerCase()}.
                        
                        You can find the OWASP Dependency-Check report attached.
                    """
                    emailext(
                        to: "${RECIPIENT}",
                        subject: subject,
                        body: body,
                        attachLog: true,
                        attachmentsPattern: 'target/dependency-check-report.html'
                    )
                }
            }
        }
    }

    post {
        always {
            // Archive the OWASP Dependency-Check report
            archiveArtifacts allowEmptyArchive: true, artifacts: 'target/dependency-check-report.html'
            
           // Archive the Nmap scan report
            archiveArtifacts 'nmap_scan_report.txt'

           // Archive the OpenVAS scan report
            archiveArtifacts allowEmptyArchive: true, artifacts: 'openvas_report.xml'

// Archive the JaCoCo coverage report
        archiveArtifacts allowEmptyArchive: true, artifacts: 'target/site/jacoco/index.html'
        
        // Publish the JaCoCo coverage report
        jacoco(
            changeBuildStatus: true,
            healthy: '0', // Set a healthy threshold for coverage (e.g., 0% means any coverage is good)
            unhealthy: '50', // Set the threshold for unhealthy (e.g., coverage below 50%)
            thresholdMode: 'relative',
            minimum: '0', // Minimum coverage
            maximum: '100' // Maximum coverage
        )
    }
}


