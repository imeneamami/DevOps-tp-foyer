pipeline {
    agent any

    tools {
        jdk 'JAVA_HOME'  // Specify the JDK installation
        maven 'M2_HOME'  // Specify the Maven installation
    }

    stages {
        // Stage to clone the repository
        stage('GIT') {
            steps {
                git branch: 'ImenAmami',
                    url: 'https://github.com/imeneamami/DevOps-tp-foyer.git'
            }
        }

        // Pre-Commit Stage for Threat Modeling and Code Analysis
        stage('Pre-Commit: Threat Modeling and Code Analysis') {
            steps {
                echo 'Performing threat modeling and checking for secure coding standards...'
                script {
                    // Define Evil User Stories for threat modeling
                    def evilUserStories = [
                        "As an attacker, I want to inject SQL queries to gain unauthorized access to the database.",
                        "As an attacker, I want to cross-site script to steal user session data.",
                        "As an attacker, I want to exploit weak passwords to gain access to user accounts."
                    ]
                    for (story in evilUserStories) {
                        echo story
                    }
                }
            }
        }

        // Stage to compile Maven project
        stage('Compile Maven') {
            steps {
                sh 'mvn clean compile'
            }
        }

        // Commit (CI) Stage for SAST Analysis
        stage('Commit: SAST Analysis') {
            steps {
                echo 'Starting SAST analysis...'

                // Run SonarQube analysis
                withSonarQubeEnv('sq1') {  // 'sq1' is the SonarQube server credentials ID
                    echo 'Running SonarQube analysis...'
                    sh 'mvn sonar:sonar'
                }
                echo 'SonarQube analysis completed. Check SonarQube for detailed report.'

                // Run Bundler-audit analysis for Ruby
                echo 'Running Bundler-audit analysis for Ruby...'
                sh 'bundle audit check'  // This will check for vulnerabilities in your Gemfile.lock
                echo 'Bundler-audit analysis completed. Check the output for findings.'
            }
        }

        // Acceptance Stage
        stage('Acceptance: Security Scanning') {
            steps {
                script {
                    // Nmap: Test for unexpected open ports
                    echo "Running Nmap to scan for open ports..."
                    sh '''
                        nmap -sT -p 1-65535 -T4 localhost -oN nmap_report.txt
                    '''
                    echo "Nmap scan completed. Report saved to nmap_report.txt."
 
                    // SQLMap: Test for SQL injection vulnerabilities
                    //echo "Running SQL Injection vulnerabilities test using SQLMap..."
                    //sh '''
                    //    python3 /home/vagrant/DevOps-tp-foyer/sqlmap/sqlmap.py -u "http://192.168.50.2:8080/vulnerable-endpoint?id=1" --batch --level=5 --risk=3 --output-dir=sqlmap_output
                   // '''
                  //  echo "SQLMap scan completed. Check sqlmap_output for results."
              //  }
          //  }
       // }

        // Production Stage
        stage('Production: Docker Build and Push') {
            steps {
                script {
                    sh 'docker build -t imen1amami/tp-foyer:5.0.0 .'
                }
            }
        }

        stage('Production: Check Permissions') {
            steps {
                script {
                    sh 'ls -l push_docker_image.sh'
                }
            }
        }

        stage('Production: Push Docker Image to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerHubCredentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                        docker push imen1amami/tp-foyer:5.0.0
                    '''
                }
            }
        }

          // Operations Stage: OpenVAS Vulnerability Scanning
        stage('Operations: OpenVAS Vulnerability Scanning') {
            steps {
                echo 'Running OpenVAS vulnerability scans...'
                script {
                    // Commands to run OpenVAS, assuming OpenVAS is installed and configured
                    // Start OpenVAS services if needed
                    sh 'sudo gvm-start'  // or the appropriate command to start the OpenVAS services
                    // Wait for OpenVAS to be ready (add a sleep if necessary)
                    sleep(60)  // Adjust the sleep duration based on your setup
                    // Create a new target and scan
                    sh '''
                        openvas-cli --create-target "localhost" --port 8080
                        openvas-cli --start-scan "localhost"
                    '''
                    echo 'OpenVAS scan initiated. Check the OpenVAS interface for results.'
                }
            }
        }

        // Notification Stage
        stage('Send Email Notification') {
            steps {
                script {
                    def buildStatus = currentBuild.result ?: 'SUCCESS'
                    def subject = "Build ${buildStatus}: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                    def body = """
                        The build has ${buildStatus.toLowerCase()}.

                        You can find the OWASP Dependency-Check report at: ${env.BUILD_URL}artifact/target/dependency-check-report.html
                    """
                    emailext(
                        to: 'amamiimen566@gmail.com',
                        subject: subject,
                        body: body,
                        attachLog: true,
                        attachmentsPattern: 'target/dependency-check-report.html'
                    )
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'target/dependency-check-report.html'
        }
    }
}