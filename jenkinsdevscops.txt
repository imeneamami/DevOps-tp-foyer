pipeline {
    agent any
    environment {
        SONARQUBE_CREDENTIALS = credentials('sonarQube_credentials')
        TRIVY_CACHE_DIR = '/var/lib/jenkins/trivy_cache'
    }

    tools {
        jdk 'JAVA_HOME'
        maven 'M2_HOME'
    }

    stages {
        stage('Pre-Commit: Threat Modeling and Secure Practices') {
            steps {
                script {
                    def attackerPersonas = [
                        "Malicious insider with admin access attempting data exfiltration.",
                        "External hacker targeting user authentication mechanisms.",
                        "Script kiddie trying to exploit known vulnerabilities in the system."
                    ]
                    echo "Attacker Personas:"
                    attackerPersonas.each { persona -> echo persona }

                    echo "\nEvil User Stories:"
                    def evilUserStories = [
                        "As an attacker, I want to inject SQL queries to gain unauthorized access to the database.",
                        "As an attacker, I want to exploit weak passwords to access user accounts."
                    ]
                    evilUserStories.each { story -> echo story }
                }
            }
        }

        stage('GIT') {
            steps {
                git branch: 'torkhaniroua',
                    url: 'https://github.com/imeneamami/DevOps-tp-foyer.git'
            }
        }

        stage('Maven Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('Commit: OWASP SCAN') {
            steps {
                dependencyCheck additionalArguments: '', odcInstallation: 'DP-check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('SONARQUBE') {
            steps {
                sh "mvn sonar:sonar -Dsonar.login=${SONARQUBE_CREDENTIALS}"
            }
        }

        stage('Acceptance: Security Scanning Tools') {
            steps {
                script {
                    echo "Running Nmap to scan for open ports..."
                    sh '''
                        nmap -sT -p 1-65535 -T4 192.168.33.10 -oN nmap_report.txt
                    '''
                    echo "Nmap scan completed. Report saved to nmap_report.txt."

                    echo "Running SQL Injection vulnerabilities test using SQLMap..."
                    sh '''
                        sqlmap -u "http://192.168.33.10/vulnerable-endpoint?id=1" --batch --level=1 --risk=1 --tamper=space2comment --output-dir=sqlmap_output
                    '''
                    echo "SQLMap scan completed. Check sqlmap_output for results."
                }
            }
        }

        stage('Building Image') {
            steps {
                sh 'docker build -t torkhaniroua/tp-foyer:5.0.0 .'
            }
        }

        stage('Trivy Scan') {
            steps {
                script {
                    if (fileExists("${TRIVY_CACHE_DIR}")) {
                        echo "Trivy DB already exists, running with --skip-db-update"
                        sh '''
                            export TRIVY_CACHE_DIR="/var/lib/jenkins/trivy_cache"
                            trivy image --severity HIGH,CRITICAL --skip-db-update \
                            --scanners vuln --timeout 10m torkhaniroua/tp-foyer:5.0.0 --exit-code 1 || echo "Vulnerabilities found but continuing..."
                        '''
                    } else {
                        echo "First scan, downloading Trivy DB..."
                        sh '''
                            export TRIVY_CACHE_DIR="/var/lib/jenkins/trivy_cache"
                            trivy image --severity HIGH,CRITICAL --scanners vuln --timeout 10m \
                            torkhaniroua/tp-foyer:5.0.0 --exit-code 1 || echo "Vulnerabilities found but continuing..."
                        '''
                    }
                }
            }
        }

        stage('Deploy Image') {
            steps {
                sh 'docker login -u torkhaniroua -p 123456789'
                sh 'docker push torkhaniroua/tp-foyer:5.0.0'
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                sh 'docker-compose up -d'
            }
        }

        stage('Run Prometheus') {
            steps {
                sh 'docker restart prometheus'
            }
        }

        stage('Run Grafana') {
            steps {
                sh 'docker restart grafana'
            }
        }
    }

    post {
        always {
            script {
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'SUCCESS'
                def bannerColor = pipelineStatus == 'SUCCESS' ? 'green' : 'red'

                def body = """
                <html>
                    <body>
                        <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                            <h2>${jobName} - Build ${buildNumber}</h2>
                            <div style="background-color: ${bannerColor}; padding: 10px;">
                                <h3 style="color: white;">Pipeline Status: ${pipelineStatus}</h3>
                            </div>
                            <p>Check the <a href="${env.BUILD_URL}">Console output</a>.</p>
                        </div>
                    </body>
                </html>
                """
                emailext(
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus}",
                    body: body,
                    to: 'torkhani.roua@esprit.tn',
                    from: 'jenkins@example.com',
                    mimeType: 'text/html'
                )
            }
        }
    }
}
